{
  "address": "0x5d2ccdb9975a32562759618C8FF16a9C2F5d79E4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "invalidPerson",
          "type": "address"
        }
      ],
      "name": "NotAuthorizedToVote",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposalNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongState",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "NewVotingCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalIndex",
          "type": "uint256"
        }
      ],
      "name": "ProposalAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum Voting.Status",
          "name": "oldState",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum Voting.Status",
          "name": "newState",
          "type": "uint8"
        }
      ],
      "name": "StateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalIndex",
          "type": "uint256"
        }
      ],
      "name": "VoteUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalIndex",
          "type": "uint256"
        }
      ],
      "name": "WinnerDeclared",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "candidateMember",
          "type": "address"
        }
      ],
      "name": "addMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "declareWinner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChairPerson",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "proposalIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "voteCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.Proposal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getState",
      "outputs": [
        {
          "internalType": "enum Voting.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "getVoteRight",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "voteWeight",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isVoted",
              "type": "bool"
            }
          ],
          "internalType": "struct Voting.VoteRight",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incrementState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startNewVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalIndex",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d2af76982d495daf9515998e5089adfa234474dfce5e06bcf3e4c14bff74687",
  "receipt": {
    "to": null,
    "from": "0x364944Bd8D06dA26C715779fA76ACc0AFFccEaAF",
    "contractAddress": "0x5d2ccdb9975a32562759618C8FF16a9C2F5d79E4",
    "transactionIndex": 91,
    "gasUsed": "1231069",
    "logsBloom": "0x
    "blockHash": "0x670a11e93b3177fb77c93e340fd5792a1e5433c5957bdffcf25e0516204bde97",
    "transactionHash": "0x7d2af76982d495daf9515998e5089adfa234474dfce5e06bcf3e4c14bff74687",
    "logs": [],
    "blockNumber": 7628461,
    "cumulativeGasUsed": "19997977",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "10928adf0fad38459d1155833b9a3dfe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"invalidPerson\",\"type\":\"address\"}],\"name\":\"NotAuthorizedToVote\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposalNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongState\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NewVotingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"}],\"name\":\"ProposalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Voting.Status\",\"name\":\"oldState\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum Voting.Status\",\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"StateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"}],\"name\":\"VoteUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"}],\"name\":\"WinnerDeclared\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidateMember\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"declareWinner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChairPerson\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"internalType\":\"struct Voting.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"enum Voting.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"getVoteRight\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"voteWeight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVoted\",\"type\":\"bool\"}],\"internalType\":\"struct Voting.VoteRight\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNewVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Voting.sol\":\"Voting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Voting.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\r\\n\\r\\n/* Future Improvements \\r\\n    - Remove Proposal\\r\\n    - More Robust Evaluation\\r\\n*/\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nerror NotAuthorized();\\r\\nerror NotAuthorizedToVote(address invalidPerson);\\r\\nerror ProposalNotFound();\\r\\nerror WrongState();\\r\\n\\r\\ncontract Voting {\\r\\n    event MemberAdded(address member);\\r\\n    event ProposalAdded(uint256 proposalIndex);\\r\\n    event VoteUsed(address indexed voter, uint256 indexed proposalIndex);\\r\\n    event WinnerDeclared(uint256 indexed proposalIndex);\\r\\n    event NewVotingCreated();\\r\\n    event StateChanged(Status oldState, Status newState);\\r\\n\\r\\n    address private immutable s_chairPerson;\\r\\n    enum Status {\\r\\n        PREPARING,\\r\\n        VOTING,\\r\\n        FINISH\\r\\n    }\\r\\n\\r\\n    Status private state;\\r\\n\\r\\n    struct VoteRight {\\r\\n        uint256 voteWeight;\\r\\n        bool isVoted;\\r\\n    }\\r\\n\\r\\n    struct Map {\\r\\n        address[] keys;\\r\\n        mapping(address => VoteRight) values;\\r\\n    }\\r\\n    Map private s_voters;\\r\\n\\r\\n    struct Proposal {\\r\\n        uint256 proposalIndex;\\r\\n        uint256 voteCount;\\r\\n    }\\r\\n\\r\\n    Proposal[] private proposals;\\r\\n\\r\\n    constructor() {\\r\\n        s_chairPerson = msg.sender;\\r\\n        s_voters.values[msg.sender] = VoteRight(2, false);\\r\\n        s_voters.keys.push(msg.sender);\\r\\n        state = Status.PREPARING;\\r\\n    }\\r\\n\\r\\n    function incrementState() public {\\r\\n        if (msg.sender != s_chairPerson) {\\r\\n            revert NotAuthorized();\\r\\n        }\\r\\n        Status temp = state;\\r\\n        state = Status(uint(state) + 1);\\r\\n        emit StateChanged(temp, state);\\r\\n    }\\r\\n\\r\\n    function addMember(address candidateMember) public {\\r\\n        if (state != Status.PREPARING) {\\r\\n            revert WrongState();\\r\\n        }\\r\\n\\r\\n        if (msg.sender != s_chairPerson) {\\r\\n            revert NotAuthorized();\\r\\n        }\\r\\n        VoteRight memory temp = VoteRight(1, false);\\r\\n        s_voters.values[candidateMember] = temp;\\r\\n        s_voters.keys.push(candidateMember);\\r\\n        emit MemberAdded(candidateMember);\\r\\n    }\\r\\n\\r\\n    function addProposal() public {\\r\\n        if (state != Status.PREPARING) {\\r\\n            revert WrongState();\\r\\n        }\\r\\n        if (msg.sender != s_chairPerson) {\\r\\n            revert NotAuthorized();\\r\\n        }\\r\\n        proposals.push(Proposal(proposals.length + 1, 0));\\r\\n        emit ProposalAdded(proposals.length);\\r\\n    }\\r\\n\\r\\n    function vote(uint256 proposalIndex) public {\\r\\n        if (state != Status.VOTING) {\\r\\n            revert WrongState();\\r\\n        }\\r\\n        if (\\r\\n            (s_voters.values[msg.sender].voteWeight == 0) ||\\r\\n            (s_voters.values[msg.sender].isVoted)\\r\\n        ) {\\r\\n            revert NotAuthorizedToVote(msg.sender);\\r\\n        }\\r\\n        if (proposals[proposalIndex].proposalIndex == 0) {\\r\\n            revert ProposalNotFound();\\r\\n        }\\r\\n\\r\\n        proposals[proposalIndex].voteCount =\\r\\n            proposals[proposalIndex].voteCount +\\r\\n            s_voters.values[msg.sender].voteWeight;\\r\\n        s_voters.values[msg.sender].isVoted = true;\\r\\n        emit VoteUsed(msg.sender, proposalIndex);\\r\\n    }\\r\\n\\r\\n    function declareWinner() public returns (uint256) {\\r\\n        if (state != Status.FINISH) {\\r\\n            revert WrongState();\\r\\n        }\\r\\n        if (msg.sender != s_chairPerson) {\\r\\n            revert NotAuthorized();\\r\\n        }\\r\\n\\r\\n        uint256 winnerIndex = 0;\\r\\n        uint256 mostVote = 0;\\r\\n        uint256 currentVoteCount;\\r\\n\\r\\n        for (uint i = 0; i < proposals.length; i++) {\\r\\n            currentVoteCount = proposals[i].voteCount;\\r\\n            if (currentVoteCount > mostVote) {\\r\\n                winnerIndex = i;\\r\\n                mostVote = currentVoteCount;\\r\\n            }\\r\\n        }\\r\\n        emit WinnerDeclared(winnerIndex);\\r\\n        return proposals[winnerIndex].proposalIndex;\\r\\n    }\\r\\n\\r\\n    function startNewVoting() public {\\r\\n        if (state != Status.FINISH) {\\r\\n            revert WrongState();\\r\\n        }\\r\\n        if (msg.sender != s_chairPerson) {\\r\\n            revert NotAuthorized();\\r\\n        }\\r\\n        delete proposals;\\r\\n        address tempMember;\\r\\n        for (uint i = 0; i < s_voters.keys.length; i++) {\\r\\n            tempMember = s_voters.keys[i];\\r\\n            delete s_voters.values[tempMember];\\r\\n        }\\r\\n        delete s_voters.keys;\\r\\n        s_voters.values[msg.sender] = VoteRight(2, false);\\r\\n        s_voters.keys.push(msg.sender);\\r\\n\\r\\n        state = Status.PREPARING;\\r\\n        emit NewVotingCreated();\\r\\n    }\\r\\n\\r\\n    function getChairPerson() public view returns (address) {\\r\\n        return s_chairPerson;\\r\\n    }\\r\\n\\r\\n    function getVoteRight(address member)\\r\\n        public\\r\\n        view\\r\\n        returns (VoteRight memory)\\r\\n    {\\r\\n        return s_voters.values[member];\\r\\n    }\\r\\n\\r\\n    function getProposal(uint256 index) public view returns (Proposal memory) {\\r\\n        return proposals[index];\\r\\n    }\\r\\n\\r\\n    function getState() public view returns (Status) {\\r\\n        return state;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd85baa9dbbc0d0f171241bfd50ad8b3d3fc9bdffc4209757bab1d31ab3c8be89\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050604051806040016040528060028152602001600015158152506001800160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083151502179055509050506001600001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060006101000a81548160ff0219169083600281111561015757610156610161565b5b0217905550610190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805161140c6101ce60003960008181610510015281816106d4015281816108010152818161089101528181610c060152610e38015261140c6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063c6d30d9c11610066578063c6d30d9c14610123578063c7f758a81461012d578063ca6d56dc1461015d578063eb399ff414610179578063ee72b06d146101a95761009e565b80630121b93f146100a357806314034bd2146100bf5780631865c57d146100dd5780632ed2b5e0146100fb5780639e7e2b0914610105575b600080fd5b6100bd60048036038101906100b89190611077565b6101b3565b005b6100c76104a2565b6040516100d491906110b3565b60405180910390f35b6100e5610651565b6040516100f29190611145565b60405180910390f35b610103610667565b005b61010d6107fd565b60405161011a91906111a1565b60405180910390f35b61012b610825565b005b61014760048036038101906101429190611077565b610b49565b60405161015491906111fa565b60405180910390f35b61017760048036038101906101729190611241565b610b99565b005b610193600480360381019061018e9190611241565b610db6565b6040516101a091906112b8565b60405180910390f35b6101b1610e36565b005b600160028111156101c7576101c66110ce565b5b60008054906101000a900460ff1660028111156101e7576101e66110ce565b5b1461021e576040517fde4168ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001800160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414806102bf57506001800160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff165b1561030157336040517f47ab6d430000000000000000000000000000000000000000000000000000000081526004016102f891906111a1565b60405180910390fd5b600060038281548110610317576103166112d3565b5b90600052602060002090600202016000015403610360576040517f635e873700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001800160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600382815481106103b9576103b86112d3565b5b9060005260206000209060020201600101546103d59190611331565b600382815481106103e9576103e86112d3565b5b90600052602060002090600202016001018190555060018060010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548160ff021916908315150217905550803373ffffffffffffffffffffffffffffffffffffffff167fffc46f3a5aef5ff9fa54292de26e0d126f3fcc6997069352ea9a243a211389c660405160405180910390a350565b60006002808111156104b7576104b66110ce565b5b60008054906101000a900460ff1660028111156104d7576104d66110ce565b5b1461050e576040517fde4168ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610593576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600080600090505b6003805490508110156105f557600381815481106105bf576105be6112d3565b5b9060005260206000209060020201600101549150828211156105e2578093508192505b80806105ed90611365565b91505061059e565b50827fc3846bd1acff429d0ab7da1331cfef5e9293c246b4ee97dbd7a95a5c1edeffa660405160405180910390a260038381548110610637576106366112d3565b5b906000526020600020906002020160000154935050505090565b60008060009054906101000a900460ff16905090565b6000600281111561067b5761067a6110ce565b5b60008054906101000a900460ff16600281111561069b5761069a6110ce565b5b146106d2576040517fde4168ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610757576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003604051806040016040528060016003805490506107769190611331565b815260200160008152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550507f3f802220982dbddc337f1811180e73513e775b18380401997927fd1454cfd0bd6003805490506040516107f391906110b3565b60405180910390a1565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600280811115610838576108376110ce565b5b60008054906101000a900460ff166002811115610858576108576110ce565b5b1461088f576040517fde4168ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610914576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360006109229190610f7d565b600080600090505b6001600001805490508110156109f15760016000018181548110610951576109506112d3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691506001800160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160006101000a81549060ff0219169055505080806109e990611365565b91505061092a565b5060016000016000610a039190610fa1565b604051806040016040528060028152602001600015158152506001800160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083151502179055509050506001600001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060006101000a81548160ff02191690836002811115610b1557610b146110ce565b5b02179055507f9abc7be021aa793f872a4b8c4e9b6765c53c07da54764452204411b7327cdc1260405160405180910390a150565b610b51610fc2565b60038281548110610b6557610b646112d3565b5b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050919050565b60006002811115610bad57610bac6110ce565b5b60008054906101000a900460ff166002811115610bcd57610bcc6110ce565b5b14610c04576040517fde4168ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c89576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051806040016040528060018152602001600015158152509050806001800160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083151502179055509050506001600001829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd91482604051610daa91906111a1565b60405180910390a15050565b610dbe610fdc565b6001800160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900460ff1615151515815250509050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ebb576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060009054906101000a900460ff169050600160008054906101000a900460ff166002811115610ef057610eef6110ce565b5b610efa9190611331565b6002811115610f0c57610f0b6110ce565b5b6000806101000a81548160ff02191690836002811115610f2f57610f2e6110ce565b5b02179055507fe8a97ea87e4388fa22d496b95a8ed5ced6717f49790318de2b928aaf37a021d88160008054906101000a900460ff16604051610f729291906113ad565b60405180910390a150565b5080546000825560020290600052602060002090810190610f9e9190610ff8565b50565b5080546000825590600052602060002090810190610fbf919061101f565b50565b604051806040016040528060008152602001600081525090565b6040518060400160405280600081526020016000151581525090565b5b8082111561101b57600080820160009055600182016000905550600201610ff9565b5090565b5b80821115611038576000816000905550600101611020565b5090565b600080fd5b6000819050919050565b61105481611041565b811461105f57600080fd5b50565b6000813590506110718161104b565b92915050565b60006020828403121561108d5761108c61103c565b5b600061109b84828501611062565b91505092915050565b6110ad81611041565b82525050565b60006020820190506110c860008301846110a4565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061110e5761110d6110ce565b5b50565b600081905061111f826110fd565b919050565b600061112f82611111565b9050919050565b61113f81611124565b82525050565b600060208201905061115a6000830184611136565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061118b82611160565b9050919050565b61119b81611180565b82525050565b60006020820190506111b66000830184611192565b92915050565b6111c581611041565b82525050565b6040820160008201516111e160008501826111bc565b5060208201516111f460208501826111bc565b50505050565b600060408201905061120f60008301846111cb565b92915050565b61121e81611180565b811461122957600080fd5b50565b60008135905061123b81611215565b92915050565b6000602082840312156112575761125661103c565b5b60006112658482850161122c565b91505092915050565b60008115159050919050565b6112838161126e565b82525050565b60408201600082015161129f60008501826111bc565b5060208201516112b2602085018261127a565b50505050565b60006040820190506112cd6000830184611289565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061133c82611041565b915061134783611041565b925082820190508082111561135f5761135e611302565b5b92915050565b600061137082611041565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036113a2576113a1611302565b5b600182019050919050565b60006040820190506113c26000830185611136565b6113cf6020830184611136565b939250505056fea26469706673582212205f2e9ca0c196603fff60b763c31fb63d089354fad7555b40caf64917c5bb124e64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063c6d30d9c11610066578063c6d30d9c14610123578063c7f758a81461012d578063ca6d56dc1461015d578063eb399ff414610179578063ee72b06d146101a95761009e565b80630121b93f146100a357806314034bd2146100bf5780631865c57d146100dd5780632ed2b5e0146100fb5780639e7e2b0914610105575b600080fd5b6100bd60048036038101906100b89190611077565b6101b3565b005b6100c76104a2565b6040516100d491906110b3565b60405180910390f35b6100e5610651565b6040516100f29190611145565b60405180910390f35b610103610667565b005b61010d6107fd565b60405161011a91906111a1565b60405180910390f35b61012b610825565b005b61014760048036038101906101429190611077565b610b49565b60405161015491906111fa565b60405180910390f35b61017760048036038101906101729190611241565b610b99565b005b610193600480360381019061018e9190611241565b610db6565b6040516101a091906112b8565b60405180910390f35b6101b1610e36565b005b600160028111156101c7576101c66110ce565b5b60008054906101000a900460ff1660028111156101e7576101e66110ce565b5b1461021e576040517fde4168ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001800160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414806102bf57506001800160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff165b1561030157336040517f47ab6d430000000000000000000000000000000000000000000000000000000081526004016102f891906111a1565b60405180910390fd5b600060038281548110610317576103166112d3565b5b90600052602060002090600202016000015403610360576040517f635e873700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001800160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600382815481106103b9576103b86112d3565b5b9060005260206000209060020201600101546103d59190611331565b600382815481106103e9576103e86112d3565b5b90600052602060002090600202016001018190555060018060010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548160ff021916908315150217905550803373ffffffffffffffffffffffffffffffffffffffff167fffc46f3a5aef5ff9fa54292de26e0d126f3fcc6997069352ea9a243a211389c660405160405180910390a350565b60006002808111156104b7576104b66110ce565b5b60008054906101000a900460ff1660028111156104d7576104d66110ce565b5b1461050e576040517fde4168ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610593576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600080600090505b6003805490508110156105f557600381815481106105bf576105be6112d3565b5b9060005260206000209060020201600101549150828211156105e2578093508192505b80806105ed90611365565b91505061059e565b50827fc3846bd1acff429d0ab7da1331cfef5e9293c246b4ee97dbd7a95a5c1edeffa660405160405180910390a260038381548110610637576106366112d3565b5b906000526020600020906002020160000154935050505090565b60008060009054906101000a900460ff16905090565b6000600281111561067b5761067a6110ce565b5b60008054906101000a900460ff16600281111561069b5761069a6110ce565b5b146106d2576040517fde4168ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610757576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003604051806040016040528060016003805490506107769190611331565b815260200160008152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550507f3f802220982dbddc337f1811180e73513e775b18380401997927fd1454cfd0bd6003805490506040516107f391906110b3565b60405180910390a1565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600280811115610838576108376110ce565b5b60008054906101000a900460ff166002811115610858576108576110ce565b5b1461088f576040517fde4168ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610914576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360006109229190610f7d565b600080600090505b6001600001805490508110156109f15760016000018181548110610951576109506112d3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691506001800160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160006101000a81549060ff0219169055505080806109e990611365565b91505061092a565b5060016000016000610a039190610fa1565b604051806040016040528060028152602001600015158152506001800160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083151502179055509050506001600001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060006101000a81548160ff02191690836002811115610b1557610b146110ce565b5b02179055507f9abc7be021aa793f872a4b8c4e9b6765c53c07da54764452204411b7327cdc1260405160405180910390a150565b610b51610fc2565b60038281548110610b6557610b646112d3565b5b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050919050565b60006002811115610bad57610bac6110ce565b5b60008054906101000a900460ff166002811115610bcd57610bcc6110ce565b5b14610c04576040517fde4168ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c89576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051806040016040528060018152602001600015158152509050806001800160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083151502179055509050506001600001829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd91482604051610daa91906111a1565b60405180910390a15050565b610dbe610fdc565b6001800160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900460ff1615151515815250509050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ebb576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060009054906101000a900460ff169050600160008054906101000a900460ff166002811115610ef057610eef6110ce565b5b610efa9190611331565b6002811115610f0c57610f0b6110ce565b5b6000806101000a81548160ff02191690836002811115610f2f57610f2e6110ce565b5b02179055507fe8a97ea87e4388fa22d496b95a8ed5ced6717f49790318de2b928aaf37a021d88160008054906101000a900460ff16604051610f729291906113ad565b60405180910390a150565b5080546000825560020290600052602060002090810190610f9e9190610ff8565b50565b5080546000825590600052602060002090810190610fbf919061101f565b50565b604051806040016040528060008152602001600081525090565b6040518060400160405280600081526020016000151581525090565b5b8082111561101b57600080820160009055600182016000905550600201610ff9565b5090565b5b80821115611038576000816000905550600101611020565b5090565b600080fd5b6000819050919050565b61105481611041565b811461105f57600080fd5b50565b6000813590506110718161104b565b92915050565b60006020828403121561108d5761108c61103c565b5b600061109b84828501611062565b91505092915050565b6110ad81611041565b82525050565b60006020820190506110c860008301846110a4565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061110e5761110d6110ce565b5b50565b600081905061111f826110fd565b919050565b600061112f82611111565b9050919050565b61113f81611124565b82525050565b600060208201905061115a6000830184611136565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061118b82611160565b9050919050565b61119b81611180565b82525050565b60006020820190506111b66000830184611192565b92915050565b6111c581611041565b82525050565b6040820160008201516111e160008501826111bc565b5060208201516111f460208501826111bc565b50505050565b600060408201905061120f60008301846111cb565b92915050565b61121e81611180565b811461122957600080fd5b50565b60008135905061123b81611215565b92915050565b6000602082840312156112575761125661103c565b5b60006112658482850161122c565b91505092915050565b60008115159050919050565b6112838161126e565b82525050565b60408201600082015161129f60008501826111bc565b5060208201516112b2602085018261127a565b50505050565b60006040820190506112cd6000830184611289565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061133c82611041565b915061134783611041565b925082820190508082111561135f5761135e611302565b5b92915050565b600061137082611041565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036113a2576113a1611302565b5b600182019050919050565b60006040820190506113c26000830185611136565b6113cf6020830184611136565b939250505056fea26469706673582212205f2e9ca0c196603fff60b763c31fb63d089354fad7555b40caf64917c5bb124e64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 106,
        "contract": "contracts/Voting.sol:Voting",
        "label": "state",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(Status)103"
      },
      {
        "astId": 123,
        "contract": "contracts/Voting.sol:Voting",
        "label": "s_voters",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Map)120_storage"
      },
      {
        "astId": 132,
        "contract": "contracts/Voting.sol:Voting",
        "label": "proposals",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(Proposal)128_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Proposal)128_storage)dyn_storage": {
        "base": "t_struct(Proposal)128_storage",
        "encoding": "dynamic_array",
        "label": "struct Voting.Proposal[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Status)103": {
        "encoding": "inplace",
        "label": "enum Voting.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(VoteRight)111_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Voting.VoteRight)",
        "numberOfBytes": "32",
        "value": "t_struct(VoteRight)111_storage"
      },
      "t_struct(Map)120_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Map",
        "members": [
          {
            "astId": 114,
            "contract": "contracts/Voting.sol:Voting",
            "label": "keys",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 119,
            "contract": "contracts/Voting.sol:Voting",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(VoteRight)111_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Proposal)128_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Proposal",
        "members": [
          {
            "astId": 125,
            "contract": "contracts/Voting.sol:Voting",
            "label": "proposalIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 127,
            "contract": "contracts/Voting.sol:Voting",
            "label": "voteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VoteRight)111_storage": {
        "encoding": "inplace",
        "label": "struct Voting.VoteRight",
        "members": [
          {
            "astId": 108,
            "contract": "contracts/Voting.sol:Voting",
            "label": "voteWeight",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 110,
            "contract": "contracts/Voting.sol:Voting",
            "label": "isVoted",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}