{
  "language": "Solidity",
  "sources": {
    "contracts/Voting.sol": {
      "content": "// SPDX-License-Identifier:MIT\r\n\r\n/* Future Improvements \r\n    - Remove Proposal\r\n    - More Robust Evaluation\r\n*/\r\npragma solidity ^0.8.0;\r\n\r\nerror NotAuthorized();\r\nerror NotAuthorizedToVote(address invalidPerson);\r\nerror ProposalNotFound();\r\nerror WrongState();\r\n\r\ncontract Voting {\r\n    event MemberAdded(address member);\r\n    event ProposalAdded(uint256 proposalIndex);\r\n    event VoteUsed(address indexed voter, uint256 indexed proposalIndex);\r\n    event WinnerDeclared(uint256 indexed proposalIndex);\r\n    event NewVotingCreated();\r\n    event StateChanged(Status oldState, Status newState);\r\n\r\n    address private immutable s_chairPerson;\r\n    enum Status {\r\n        PREPARING,\r\n        VOTING,\r\n        FINISH\r\n    }\r\n\r\n    Status private state;\r\n\r\n    struct VoteRight {\r\n        uint256 voteWeight;\r\n        bool isVoted;\r\n    }\r\n\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => VoteRight) values;\r\n    }\r\n    Map private s_voters;\r\n\r\n    struct Proposal {\r\n        uint256 proposalIndex;\r\n        uint256 voteCount;\r\n    }\r\n\r\n    Proposal[] private proposals;\r\n\r\n    constructor() {\r\n        s_chairPerson = msg.sender;\r\n        s_voters.values[msg.sender] = VoteRight(2, false);\r\n        s_voters.keys.push(msg.sender);\r\n        state = Status.PREPARING;\r\n    }\r\n\r\n    function incrementState() public {\r\n        if (msg.sender != s_chairPerson) {\r\n            revert NotAuthorized();\r\n        }\r\n        Status temp = state;\r\n        state = Status(uint(state) + 1);\r\n        emit StateChanged(temp, state);\r\n    }\r\n\r\n    function addMember(address candidateMember) public {\r\n        if (state != Status.PREPARING) {\r\n            revert WrongState();\r\n        }\r\n\r\n        if (msg.sender != s_chairPerson) {\r\n            revert NotAuthorized();\r\n        }\r\n        VoteRight memory temp = VoteRight(1, false);\r\n        s_voters.values[candidateMember] = temp;\r\n        s_voters.keys.push(candidateMember);\r\n        emit MemberAdded(candidateMember);\r\n    }\r\n\r\n    function addProposal() public {\r\n        if (state != Status.PREPARING) {\r\n            revert WrongState();\r\n        }\r\n        if (msg.sender != s_chairPerson) {\r\n            revert NotAuthorized();\r\n        }\r\n        proposals.push(Proposal(proposals.length + 1, 0));\r\n        emit ProposalAdded(proposals.length);\r\n    }\r\n\r\n    function vote(uint256 proposalIndex) public {\r\n        if (state != Status.VOTING) {\r\n            revert WrongState();\r\n        }\r\n        if (\r\n            (s_voters.values[msg.sender].voteWeight == 0) ||\r\n            (s_voters.values[msg.sender].isVoted)\r\n        ) {\r\n            revert NotAuthorizedToVote(msg.sender);\r\n        }\r\n        if (proposals[proposalIndex].proposalIndex == 0) {\r\n            revert ProposalNotFound();\r\n        }\r\n\r\n        proposals[proposalIndex].voteCount =\r\n            proposals[proposalIndex].voteCount +\r\n            s_voters.values[msg.sender].voteWeight;\r\n        s_voters.values[msg.sender].isVoted = true;\r\n        emit VoteUsed(msg.sender, proposalIndex);\r\n    }\r\n\r\n    function declareWinner() public returns (uint256) {\r\n        if (state != Status.FINISH) {\r\n            revert WrongState();\r\n        }\r\n        if (msg.sender != s_chairPerson) {\r\n            revert NotAuthorized();\r\n        }\r\n\r\n        uint256 winnerIndex = 0;\r\n        uint256 mostVote = 0;\r\n        uint256 currentVoteCount;\r\n\r\n        for (uint i = 0; i < proposals.length; i++) {\r\n            currentVoteCount = proposals[i].voteCount;\r\n            if (currentVoteCount > mostVote) {\r\n                winnerIndex = i;\r\n                mostVote = currentVoteCount;\r\n            }\r\n        }\r\n        emit WinnerDeclared(winnerIndex);\r\n        return proposals[winnerIndex].proposalIndex;\r\n    }\r\n\r\n    function startNewVoting() public {\r\n        if (state != Status.FINISH) {\r\n            revert WrongState();\r\n        }\r\n        if (msg.sender != s_chairPerson) {\r\n            revert NotAuthorized();\r\n        }\r\n        delete proposals;\r\n        address tempMember;\r\n        for (uint i = 0; i < s_voters.keys.length; i++) {\r\n            tempMember = s_voters.keys[i];\r\n            delete s_voters.values[tempMember];\r\n        }\r\n        delete s_voters.keys;\r\n        s_voters.values[msg.sender] = VoteRight(2, false);\r\n        s_voters.keys.push(msg.sender);\r\n\r\n        state = Status.PREPARING;\r\n        emit NewVotingCreated();\r\n    }\r\n\r\n    function getChairPerson() public view returns (address) {\r\n        return s_chairPerson;\r\n    }\r\n\r\n    function getVoteRight(address member)\r\n        public\r\n        view\r\n        returns (VoteRight memory)\r\n    {\r\n        return s_voters.values[member];\r\n    }\r\n\r\n    function getProposal(uint256 index) public view returns (Proposal memory) {\r\n        return proposals[index];\r\n    }\r\n\r\n    function getState() public view returns (Status) {\r\n        return state;\r\n    }\r\n}\r\n"
    },
    "contracts/VotingAutomated.sol": {
      "content": "// SPDX-License-Identifier:MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\";\r\n\r\nerror NotAuthorized();\r\nerror NotAuthorizedToVote(address invalidPerson);\r\nerror ProposalNotFound();\r\nerror WrongState();\r\n\r\ncontract VotingAutomated is KeeperCompatible {\r\n    event MemberAdded(address member);\r\n    event ProposalAdded(uint256 proposalIndex);\r\n    event VoteUsed(address indexed voter, uint256 indexed proposalIndex);\r\n    event WinnerDeclared(uint256 indexed proposalIndex);\r\n    event NewVotingCreated();\r\n    event StateChanged(Status oldState, Status newState);\r\n\r\n    address private immutable s_chairPerson;\r\n    uint256 private lastTimeStamp;\r\n    uint256 private immutable interval;\r\n    uint256 private s_LastWinner;\r\n    enum Status {\r\n        PREPARING,\r\n        VOTING,\r\n        FINISH\r\n    }\r\n\r\n    Status private state;\r\n\r\n    struct VoteRight {\r\n        uint256 voteWeight;\r\n        bool isVoted;\r\n    }\r\n\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => VoteRight) values;\r\n    }\r\n    Map private s_voters;\r\n\r\n    struct Proposal {\r\n        uint256 proposalIndex;\r\n        uint256 voteCount;\r\n    }\r\n\r\n    Proposal[] private proposals;\r\n\r\n    constructor(uint256 _interval) {\r\n        s_chairPerson = msg.sender;\r\n        s_voters.values[msg.sender] = VoteRight(2, false);\r\n        s_voters.keys.push(msg.sender);\r\n        state = Status.PREPARING;\r\n        interval = _interval;\r\n        lastTimeStamp = block.timestamp;\r\n    }\r\n\r\n    function incrementState() public {\r\n        if (msg.sender != s_chairPerson) {\r\n            revert NotAuthorized();\r\n        }\r\n        Status temp = state;\r\n        state = Status(uint(state) + 1);\r\n        emit StateChanged(temp, state);\r\n    }\r\n\r\n    function addMember(address candidateMember) public {\r\n        if (state != Status.PREPARING) {\r\n            revert WrongState();\r\n        }\r\n\r\n        if (msg.sender != s_chairPerson) {\r\n            revert NotAuthorized();\r\n        }\r\n        VoteRight memory temp = VoteRight(1, false);\r\n        s_voters.values[candidateMember] = temp;\r\n        s_voters.keys.push(candidateMember);\r\n        emit MemberAdded(candidateMember);\r\n    }\r\n\r\n    function addProposal() public {\r\n        if (state != Status.PREPARING) {\r\n            revert WrongState();\r\n        }\r\n        if (msg.sender != s_chairPerson) {\r\n            revert NotAuthorized();\r\n        }\r\n        proposals.push(Proposal(proposals.length + 1, 0));\r\n        emit ProposalAdded(proposals.length);\r\n    }\r\n\r\n    function vote(uint256 proposalIndex) public {\r\n        if (state != Status.VOTING) {\r\n            revert WrongState();\r\n        }\r\n        if (\r\n            (s_voters.values[msg.sender].voteWeight == 0) ||\r\n            (s_voters.values[msg.sender].isVoted)\r\n        ) {\r\n            revert NotAuthorizedToVote(msg.sender);\r\n        }\r\n        if (proposals[proposalIndex].proposalIndex == 0) {\r\n            revert ProposalNotFound();\r\n        }\r\n\r\n        proposals[proposalIndex].voteCount =\r\n            proposals[proposalIndex].voteCount +\r\n            s_voters.values[msg.sender].voteWeight;\r\n        s_voters.values[msg.sender].isVoted = true;\r\n        emit VoteUsed(msg.sender, proposalIndex);\r\n    }\r\n\r\n    function declareWinner() public returns (uint256) {\r\n        if (state != Status.FINISH) {\r\n            revert WrongState();\r\n        }\r\n\r\n        uint256 winnerIndex = 0;\r\n        uint256 mostVote = 0;\r\n        uint256 currentVoteCount;\r\n\r\n        for (uint i = 0; i < proposals.length; i++) {\r\n            currentVoteCount = proposals[i].voteCount;\r\n            if (currentVoteCount > mostVote) {\r\n                winnerIndex = i;\r\n                mostVote = currentVoteCount;\r\n            }\r\n        }\r\n        emit WinnerDeclared(winnerIndex);\r\n        return proposals[winnerIndex].proposalIndex;\r\n    }\r\n\r\n    function startNewVoting() public {\r\n        if (state != Status.FINISH) {\r\n            revert WrongState();\r\n        }\r\n\r\n        delete proposals;\r\n        address tempMember;\r\n        for (uint i = 0; i < s_voters.keys.length; i++) {\r\n            tempMember = s_voters.keys[i];\r\n            delete s_voters.values[tempMember];\r\n        }\r\n        delete s_voters.keys;\r\n        s_voters.values[msg.sender] = VoteRight(2, false);\r\n        s_voters.keys.push(msg.sender);\r\n\r\n        state = Status.PREPARING;\r\n        emit NewVotingCreated();\r\n    }\r\n\r\n    function checkUpkeep(\r\n        bytes calldata /* checkData */\r\n    )\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            bool upkeepNeeded,\r\n            bytes memory /* performData */\r\n        )\r\n    {\r\n        upkeepNeeded =\r\n            ((block.timestamp - lastTimeStamp) > interval) &&\r\n            (proposals.length > 0) &&\r\n            (s_voters.keys.length > 0);\r\n        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.\r\n    }\r\n\r\n    function performUpkeep(\r\n        bytes calldata /* performData */\r\n    ) external override {\r\n        //We highly recommend revalidating the upkeep in the performUpkeep function\r\n        if ((block.timestamp - lastTimeStamp) > interval) {\r\n            lastTimeStamp = block.timestamp;\r\n            if (state == Status.PREPARING) {\r\n                state = Status.VOTING;\r\n            } else if (state == Status.VOTING) {\r\n                state = Status.FINISH;\r\n                s_LastWinner = declareWinner();\r\n                startNewVoting();\r\n            }\r\n        }\r\n    }\r\n\r\n    function getChairPerson() public view returns (address) {\r\n        return s_chairPerson;\r\n    }\r\n\r\n    function getVoteRight(address member)\r\n        public\r\n        view\r\n        returns (VoteRight memory)\r\n    {\r\n        return s_voters.values[member];\r\n    }\r\n\r\n    function getProposal(uint256 index) public view returns (Proposal memory) {\r\n        return proposals[index];\r\n    }\r\n\r\n    function getState() public view returns (Status) {\r\n        return state;\r\n    }\r\n\r\n    function getLastTimeStamp() public view returns (uint256) {\r\n        return lastTimeStamp;\r\n    }\r\n\r\n    function getInterval() public view returns (uint256) {\r\n        return interval;\r\n    }\r\n\r\n    function getLastWinner() public view returns (uint256) {\r\n        return s_LastWinner;\r\n    }\r\n\r\n    function getDifference() public view returns (uint256) {\r\n        return block.timestamp - lastTimeStamp;\r\n    }\r\n}\r\n"
    },
    "@chainlink/contracts/src/v0.8/KeeperCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./KeeperBase.sol\";\nimport \"./interfaces/KeeperCompatibleInterface.sol\";\n\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\n"
    },
    "@chainlink/contracts/src/v0.8/KeeperBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract KeeperBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function preventExecution() internal view {\n    if (tx.origin != address(0)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    preventExecution();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface KeeperCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}